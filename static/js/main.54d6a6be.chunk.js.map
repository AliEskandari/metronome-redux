{"version":3,"sources":["store/reducer.js","components/PlayButton.js","components/VolumeBar.js","components/BpmInput.js","components/MetronomeLight.js","components/MetronomeLightController.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","playStatus","volume","bpm","mspb","tick","timeElapsed","dateTime","stopState","togglePlayStatus","type","ConnectedPlayButton","this","props","Button","variant","onKeyDown","event","preventDefault","size","onClick","React","Component","mapDispatchToProps","PlayButton","connect","state","ConnectedVolumeBar","handleVolumeChange","e","console","log","setVolume","parseFloat","target","value","className","min","max","step","onChange","VolumeBar","ConnectedBpmInput","handleBpmInputChange","inputString","setBpm","parsedString","parseInt","isNaN","num","bpmInputValue","BpmInput","Dot","styled","span","active","MetronomeLight","nextProps","nextState","ConnectedMetronomeLightController","setActiveIndex","activeIndex","length","sound","Audio","play","lights","index","push","key","MetronomeLightController","ConnectedTimer","startTimer","interval","setInterval","Date","now","stopTimer","clearInterval","Timer","App","incrementBpm","delta","Container","handleKeys","onKeyEvent","handleFocusableElements","Row","Col","md","xs","order","lg","block","sm","offset","Boolean","window","location","hostname","match","store","createStore","action","newTimeElapsed","Math","floor","newBpm","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54d6a6be.chunk.js","sourcesContent":["\nconst DEFAULT_BPM = 100;\n\n// Actions\nconst TOGGLE_PLAY_STATUS = \"TOGGLE_PLAY_STATUS\";\nconst PLAY = \"PLAY\";\nconst STOP = \"STOP\";\nconst SET_VOLUME = \"SET_VOLUME\";\nconst SET_BPM = \"SET_BPM\";\nconst INCREMENT_BPM = \"INCREMENT_BPM\";\nconst TICK = \"TICK\";\n\n// Reducer\nconst initialState = {\n    playStatus: false,\n    volume: .5,\n    bpm: DEFAULT_BPM,\n    mspb: 60000 / DEFAULT_BPM,\n    tick: -1,\n    timeElapsed: 0,\n    dateTime: null\n}\n\nconst stopState = {\n    playStatus: false,\n    tick: -1,\n    timeElapsed: 0,\n    dateTime: null\n}\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case TOGGLE_PLAY_STATUS:\n            if (state.playStatus) return { ...state, ...stopState };\n            else return { ...state, playStatus: true, dateTime: Date.now() }\n        case PLAY:\n            return { ...state, playStatus: true, dateTime: action.dateTime }\n        case STOP:\n            return { ...state, ...stopState }\n        case TICK:\n            let newTimeElapsed = state.timeElapsed + (action.dateTime - state.dateTime);\n            let tick = Math.floor(newTimeElapsed / state.mspb);\n            return { ...state, timeElapsed: newTimeElapsed, tick: tick, dateTime: action.dateTime };\n        case SET_VOLUME:\n            return { ...state, volume: action.volume }\n        case SET_BPM:\n            return { ...state, bpm: action.bpm, mspb: 60000 / action.bpm }\n        case INCREMENT_BPM:\n            let newBpm = state.bpm + action.delta;\n            if (newBpm >= 200) newBpm = 200;\n            if (newBpm <= 5) newBpm = 5;\n            return { ...state, bpm: newBpm, mspb: 60000 / newBpm }\n        default:\n            return state;\n    }\n};\n\n// Action Creators\nexport function togglePlayStatus() {\n    return { type: TOGGLE_PLAY_STATUS }\n}\n\nexport function play(dateTime) {\n    return { type: PLAY, dateTime }\n}\n\nexport function stop() {\n    return { type: STOP }\n}\n\nexport function setVolume(volume) {\n    return { type: SET_VOLUME, volume };\n}\n\nexport function setBpm(bpm) {\n    return { type: SET_BPM, bpm }\n}\n\nexport function incrementBpm(delta) {\n    return { type: INCREMENT_BPM, delta }\n}\n\nexport function tick(dateTime) {\n    return { type: TICK, dateTime }\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { togglePlayStatus, tick } from \"../store/reducer\"\n\nclass ConnectedPlayButton extends React.Component {\n    render() {\n        const { playStatus } = this.props;\n        return (\n            <Button variant=\"\" onKeyDown={(event) => event.preventDefault()} size=\"lg\" onClick={this.props.togglePlayStatus}>\n                {!playStatus ? \"Play\" : \"Stop\"}\n            </Button>\n        )\n    }\n\n}\n\nconst select = (state) => { return { playStatus: state.playStatus } }\nconst mapDispatchToProps = { togglePlayStatus, tick }\n\nconst PlayButton = connect(select, mapDispatchToProps)(ConnectedPlayButton);\nexport default PlayButton;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setVolume } from \"../store/reducer\"\n\nclass ConnectedVolumeBar extends React.Component {\n\n    /**\n     * Set the volume\n     */\n    handleVolumeChange = (e) => {\n        console.log(\"setting volume\");\n        this.props.setVolume(parseFloat(e.target.value));\n    }\n\n    render () {\n        const { volume } = this.props;\n        return (\n            <input\n                type=\"range\"\n                className=\"vert-input\"\n                min=\"0.0\"\n                max=\"1.0\"\n                step=\"0.05\"\n                value={volume}\n                onChange={this.handleVolumeChange} />\n        )\n    }\n\n}\n\nconst select = (state) => {\n    return {\n        volume: state.volume\n    }\n}\n\nconst mapDispatchToProps = { setVolume }\n\nconst VolumeBar = connect(select, mapDispatchToProps)(ConnectedVolumeBar);\n\nexport default VolumeBar;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setBpm } from \"../store/reducer\"\n\nclass ConnectedBpmInput extends React.Component {\n\n    /**\n     * Runs when the input value changes. Does NOT run on initial\n     * render. Will set state var to either empty string or num\n     * between specified values. Otherwise, input value is unchanged.\n     * Then set bpm to integer from input value. Then plays the timer\n     * if the status was already playing.\n     */\n    handleBpmInputChange = (e) => {\n        let inputString = e.target.value;\n        if (inputString === \"\") {\n            this.props.setBpm(0);\n        }\n\n        let parsedString = parseInt(inputString)\n        if (!isNaN(parsedString)) {\n            let num = parsedString;\n            if (num > 0 && num <= 200) {\n                this.props.setBpm(num);\n            }\n        }\n    }\n\n    render() {\n        if (this.props.bpm === 0) {\n            this.bpmInputValue = \"\";\n        } else {\n            this.bpmInputValue = parseInt(this.props.bpm);\n        }\n        return (\n            <input value={this.bpmInputValue} className=\"input-bpm\" onChange={this.handleBpmInputChange} />\n        )\n    }\n\n}\n\nconst select = (state) => {\n    return {\n        bpm: state.bpm,\n        playStatus: state.playStatus\n    }\n}\n\nconst mapDispatchToProps = { setBpm }\n\nconst BpmInput = connect(select, mapDispatchToProps)(ConnectedBpmInput);\n\nexport default BpmInput;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Dot = styled.span`\n    height: 50px;\n    width: 50px;\n    background-color: ${props => props.active ? \"#000\" : \"#ececec\"};\n    border-radius: 50%;\n    display: inline-block;\n`;\n\nclass MetronomeLight extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.active === nextProps.active) {\n            return false;\n        }\n        return true;\n    }\n\n    render() {\n        console.log(\"Light rendering\");\n        return (\n            <Dot active={this.props.active}></Dot>\n        );\n    }\n}\n\nexport default MetronomeLight;","import React from 'react';\nimport MetronomeLight from './MetronomeLight';\nimport { connect } from 'react-redux';\n\nclass ConnectedMetronomeLightController extends React.Component {\n    constructor(props) {\n        super(props);\n        this.activeIndex = -1;\n        this.sound = new Audio(\"/clickSound.mp3\");\n    }\n\n    /**\n     * Sets activeIndex to next index. Or resets activeIndex if tick is 0.\n     */\n    setActiveIndex = () => {\n        if (this.props.tick === -1) {\n            this.activeIndex = -1;\n        } else {\n            this.activeIndex = this.props.tick % this.props.length;\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.tick === nextProps.tick) {\n            return false;\n        }\n        return true;\n    }\n\n    render() {\n        this.setActiveIndex();\n        console.log(\"MetronomeLightController: Render:\", { tick: this.props.tick, activeIndex: this.activeIndex });\n\n        this.sound.volume = this.props.volume;\n        if (this.props.tick !== -1) {\n            this.sound.play();\n        }\n\n        let lights = [];\n        for (let index = 0; index < this.props.length; index++) {\n            let active = this.activeIndex === index;\n            lights.push(\n                <MetronomeLight key={index} active={active} />\n            );\n        }\n        return (\n            <span className=\"d-flex justify-content-between\">\n                {lights}\n            </span>\n        );\n    }\n}\n\nconst select = (state) => { return { volume: state.volume, tick: state.tick } };\n\nconst MetronomeLightController = connect(select)(ConnectedMetronomeLightController);\nexport default MetronomeLightController;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { tick } from \"../store/reducer\"\n\nclass ConnectedTimer extends React.Component {\n\n    /**\n     * Creates timer loop to increment tick.\n     */\n    startTimer = () => {\n        this.interval = setInterval(() => {\n            this.props.tick(Date.now());\n        });\n    }\n\n    /**\n     * Clears timer loop\n     */\n    stopTimer = () => {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        this.props.playStatus ? this.startTimer() : this.stopTimer();\n        return null;\n    }\n\n}\n\nconst select = (state) => { return { playStatus: state.playStatus } }\nconst mapDispatchToProps = { tick }\n\nconst Timer = connect(select, mapDispatchToProps)(ConnectedTimer);\nexport default Timer;","import React from 'react';\nimport './App.css';\nimport { Row, Col, Container, Button } from 'react-bootstrap';\nimport PlayButton from \"./components/PlayButton\";\nimport VolumeBar from \"./components/VolumeBar\";\nimport BpmInput from \"./components/BpmInput\";\nimport MetronomeLightController from './components/MetronomeLightController'\nimport Timer from \"./components/Timer\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\nimport { connect } from \"react-redux\";\nimport { togglePlayStatus, incrementBpm } from \"./store/reducer\";\n\nfunction ConnectedApp(props) {\n\n  /**\n   * Prevents default. Used on buttons.\n   */\n  const preventDefault = (e) => {\n    e.preventDefault();\n  }\n\n  return (\n    <Container className=\"d-flex align-items-center justify-content-between flex-wrap\">\n\n      <KeyboardEventHandler handleKeys={['space']} onKeyEvent={props.togglePlayStatus} handleFocusableElements={true} />\n\n      <Row>\n\n        {/* Spacer: None on mobile, Left for medium */}\n        <Col md={2} className=\"d-none d-sm-none d-md-block\">\n        </Col>\n\n        {/* Metronome full row on mobile, Middle for medium */}\n        <Col xs={12} md={8}>\n          <Row className=\"d-flex align-items-center justify-content-between\">\n            <Col xs={{ span: 3, order: 2 }} lg={{ span: 1, order: 1 }} className=\"d-flex px-3 px-lg-0 justify-content-center\">\n              <Button variant=\"\" size=\"lg\" block onKeyDown={preventDefault} onClick={(e) => props.incrementBpm(-5)}>-5</Button>\n            </Col>\n            <Col xs={{ span: 3, order: 3 }} lg={{ span: 1, order: 2 }} className=\"d-flex px-3 px-lg-0 justify-content-center\">\n              <Button variant=\"\" size=\"lg\" block onKeyDown={preventDefault} onClick={(e) => props.incrementBpm(-1)}>-</Button>\n            </Col>\n\n            <Col xs={{ span: 12, order: 1 }} lg={{ span: 6, order: 3 }} className=\"text-center\">\n              <BpmInput />\n            </Col>\n\n            <Col xs={{ span: 3, order: 4 }} lg={{ span: 1, order: 4 }} className=\"d-flex px-3 px-lg-0 justify-content-center\">\n              <Button variant=\"\" size=\"lg\" block onKeyDown={preventDefault} onClick={(e) => props.incrementBpm(1)}>+</Button>\n            </Col>\n            <Col xs={{ span: 3, order: 5 }} lg={{ span: 1, order: 5 }} className=\"d-flex px-3 px-lg-0 justify-content-center\">\n              <Button variant=\"\" size=\"lg\" block onKeyDown={preventDefault} onClick={(e) => props.incrementBpm(5)}>+5</Button>\n            </Col>\n          </Row>\n\n          <Row className=\"d-flex justify-content-center row-metronome-lights mt-5 mt-lg-0\">\n            <Col xs={8} sm={6} md={8} lg={6} className=\"\">\n              <MetronomeLightController length={4} />\n            </Col>\n          </Row>\n\n          <Row className=\"d-flex justify-content-center\">\n            <Col xs={6} className=\"d-flex justify-content-center\">\n              <PlayButton />\n            </Col>\n          </Row>\n        </Col>\n\n        {/* Volume: full row on mobile, Right for medium */}\n        <Col xs={12} md={{ span: 1, offset: 1 }} className=\"d-flex justify-content-center py-4\">\n          <VolumeBar />\n        </Col>\n      </Row>\n\n      <Timer />\n\n    </Container>\n  );\n}\n\nconst App = connect(null, { togglePlayStatus, incrementBpm })(ConnectedApp);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./store/reducer\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}